https://leetcode.com/problems/time-based-key-value-store/description/
981. Time Based Key-Value Store
Medium
Topics
Companies
Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:

Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"
 

Constraints:

1 <= key.length, value.length <= 100
key and value consist of lowercase English letters and digits.
1 <= timestamp <= 107
All the timestamps timestamp of set are strictly increasing.
At most 2 * 105 calls will be made to set and get.

1. Brute Force
class TimeMap:

    def __init__(self):
        self.keyStore = {}

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.keyStore:
            self.keyStore[key] = {}
        if timestamp not in self.keyStore[key]:
            self.keyStore[key][timestamp] = []
        self.keyStore[key][timestamp].append(value)

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.keyStore:
            return ""
        seen = 0

        for time in self.keyStore[key]:
            if time <= timestamp:
                seen = max(seen, time)
        return "" if seen == 0 else self.keyStore[key][seen][-1]
Time & Space Complexity
Time complexity: 
O
(
1
)
O(1) for 
s
e
t
(
)
set() and 
O
(
n
)
O(n) for 
g
e
t
(
)
get().
Space complexity: 
O
(
m
∗
n
)
O(m∗n)
Where 
n
n is the total number of unique timestamps associated with a key and 
m
m is the total number of keys.
2. Binary Search (Sorted Map)
from sortedcontainers import SortedDict

class TimeMap:
    def __init__(self):
        self.m = defaultdict(SortedDict)

    def set(self, key: str, value: str, timestamp: int) -> None:
        self.m[key][timestamp] = value

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.m:
            return ""
        
        timestamps = self.m[key]
        idx = timestamps.bisect_right(timestamp) - 1
        
        if idx >= 0:
            closest_time = timestamps.iloc[idx]
            return timestamps[closest_time]
        return ""
Time & Space Complexity
Time complexity: 
O
(
1
)
O(1) for 
s
e
t
(
)
set() and 
O
(
log
⁡
n
)
O(logn) for 
g
e
t
(
)
get().
Space complexity: 
O
(
m
∗
n
)
O(m∗n)
Where 
n
n is the total number of values associated with a key and 
m
m is the total number of keys.
3. Binary Search (Array)
class TimeMap:

    def __init__(self):
        self.keyStore = {}  # key : list of [val, timestamp]

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.keyStore:
            self.keyStore[key] = []
        self.keyStore[key].append([value, timestamp])

    def get(self, key: str, timestamp: int) -> str:
        res, values = "", self.keyStore.get(key, [])
        l, r = 0, len(values) - 1
        while l <= r:
            m = (l + r) // 2
            if values[m][1] <= timestamp:
                res = values[m][0]
                l = m + 1
            else:
                r = m - 1
        return res
Time & Space Complexity
Time complexity: 
O
(
1
)
O(1) for 
s
e
t
(
)
set() and 
O
(
log
⁡
n
)
O(logn) for 
g
e
t
(
)
get().
Space complexity: 
O
(
m
∗
n
)
O(m∗n)
Where 
n
n is the total number of values associated with a key and 
m
m is the total number of keys.

```python
"""
PROBLEM PATTERNS & APPROACHES:
----------------------------
1. Data Structure Choice:
   - HashMap + Arrays (Brute Force)
   - HashMap + Sorted Lists
   - HashMap + Binary Search
   - HashMap + TreeMap
   
2. Key Operations:
   - Insertion: O(1) or O(log n)
   - Retrieval: O(n) to O(log n)
   - Space: O(n) where n is number of timestamps

3. Core Pattern:
   - Binary Search on Timestamps
   - Closest element search
   - Monotonic sequence (timestamps increasing)
"""

# Approach 1: Brute Force with HashMap and List
class TimeMapBrute:
    """
    Brute Force Approach using HashMap of Lists
    
    Visual Example:
    timeMap = {
        "foo": [(1, "bar"), (4, "bar2")]
    }
    
    For example sequence:
    1. set("foo", "bar", 1):
       foo -> [(1, "bar")]
    
    2. get("foo", 1):
       foo -> scan list -> find 1 -> return "bar"
    
    3. get("foo", 3):
       foo -> scan list -> find last value <= 3 -> return "bar"
    
    4. set("foo", "bar2", 4):
       foo -> [(1, "bar"), (4, "bar2")]
    
    Time Complexity:
    - set: O(1)
    - get: O(n) where n is timestamps for key
    Space: O(n) total entries
    """
    def __init__(self):
        self.store = {}  # key -> list of (timestamp, value)

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.store:
            self.store[key] = []
        self.store[key].append((timestamp, value))

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.store:
            return ""
            
        # Linear scan to find closest timestamp
        result = ""
        for ts, val in self.store[key]:
            if ts <= timestamp:
                result = val
            else:
                break
        return result

# Approach 2: Optimized with Binary Search
class TimeMapOptimal:
    """
    Optimized Approach using Binary Search
    
    Visual Example for key "foo":
    timestamps: [1, 4]
    values:     ["bar", "bar2"]
    
    Binary Search Process for timestamp=3:
    1. left=0, right=1, mid=0
       timestamps[0]=1 < 3, keep result, left=1
    
    2. left=1, right=1, mid=1
       timestamps[1]=4 > 3, right=0
       
    3. Return last valid result ("bar")
    
    Time Complexity:
    - set: O(1)
    - get: O(log n) where n is timestamps for key
    Space: O(n) total entries
    
    Detailed state tracking for example:
    1. set("foo", "bar", 1):
       foo -> {
           timestamps: [1]
           values: ["bar"]
       }
       
    2. get("foo", 1):
       Search in [1]
       Found exact match -> return "bar"
       
    3. get("foo", 3):
       Search in [1]
       Found 1 < 3 -> return "bar"
       
    4. set("foo", "bar2", 4):
       foo -> {
           timestamps: [1, 4]
           values: ["bar", "bar2"]
       }
    """
    def __init__(self):
        # Each key maps to two parallel arrays:
        # timestamps (sorted) and corresponding values
        self.store = {}  

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.store:
            self.store[key] = {'timestamps': [], 'values': []}
        self.store[key]['timestamps'].append(timestamp)
        self.store[key]['values'].append(value)

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.store:
            return ""
            
        timestamps = self.store[key]['timestamps']
        values = self.store[key]['values']
        
        # Binary search for largest timestamp <= target
        left, right = 0, len(timestamps) - 1
        result = ""
        
        while left <= right:
            mid = (left + right) // 2
            if timestamps[mid] <= timestamp:
                result = values[mid]
                left = mid + 1
            else:
                right = mid - 1
                
        return result

# Approach 3: Using SortedDict (if available)
from sortedcontainers import SortedDict
class TimeMapSorted:
    """
    Alternative using SortedDict data structure
    
    Advantages:
    - Maintains sorted order automatically
    - Built-in methods for finding floor/ceiling
    - Clean implementation
    
    Visual Structure:
    foo -> SortedDict({
        1: "bar",
        4: "bar2"
    })
    
    Time Complexity:
    - set: O(log n)
    - get: O(log n)
    Space: O(n)
    """
    def __init__(self):
        self.store = {}  # key -> SortedDict({timestamp: value})

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.store:
            self.store[key] = SortedDict()
        self.store[key][timestamp] = value

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.store:
            return ""
            
        timestamps = self.store[key]
        idx = timestamps.bisect_right(timestamp)
        return timestamps.peekitem(idx-1)[1] if idx > 0 else ""

"""
COMPLETE EXAMPLE WALKTHROUGH
--------------------------
Example: ["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]

State Evolution (Using Optimal Solution):

1. TimeMap():
   store = {}

2. set("foo", "bar", 1):
   store = {
       "foo": {
           timestamps: [1]
           values: ["bar"]
       }
   }

3. get("foo", 1):
   Binary search in [1]
   Returns "bar" (exact match)

4. get("foo", 3):
   Binary search in [1]
   1 < 3, returns "bar"

5. set("foo", "bar2", 4):
   store = {
       "foo": {
           timestamps: [1, 4]
           values: ["bar", "bar2"]
       }
   }

6. get("foo", 4):
   Binary search in [1, 4]
   Returns "bar2" (exact match)

7. get("foo", 5):
   Binary search in [1, 4]
   4 < 5, returns "bar2"

OPTIMIZATION TECHNIQUES
---------------------
1. Space Optimization:
   - Use arrays instead of objects for timestamps/values
   - Preallocate space if max calls known

2. Time Optimization:
   - Binary search instead of linear scan
   - Cache recent results
   - Use built-in data structures

EDGE CASES
---------
1. Empty key
2. Timestamp before first entry
3. Exact timestamp matches
4. Timestamp between entries
5. Timestamp after last entry
"""